# -*- coding: utf-8 -*-
"""recommendation-systems.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrosASEBOtNsO3vM7Hxbn7eHHJ2i7htd
"""

import pandas as pd
import numpy as np
import json

ratings = pd.read_json('/content/Beauty.json', lines=True)

ratings

#1. Write a function that recommends 5 beauty products for each user based on popularity among other users.

ratings.info()

rating_grp = ratings.groupby('asin').agg({'overall': [np.size, np.sum, np.mean]})

rating_grp

type(rating_grp)

rating_grp.info()

rating_grp[('overall', 'size')].max()

rating_grp[('overall', 'size')].min()

#graph the overall size
rating_grp[('overall', 'size')].plot(kind='hist')

rating_grp[('overall', 'size')].describe()

popular_bags = rating_grp[rating_grp[('overall', 'size')] > 5].sort_values(('overall', 'mean'), ascending=False)

popular_bags

ratings

def recommend_popular(df, ratings, reviewerID, n):
  purchased = ratings.loc[ratings["reviewerID"] == reviewerID, 'asin'].values
  not_purchased = [asin for asin in df.index if asin not in purchased]
  return not_purchased[:n]

ratings[ratings['reviewerID'] == 'A3CIUOJXQ5VDQ2']

recommend_popular(popular_bags, ratings, 'A3CIUOJXQ5VDQ2', 5)

recommend_popular(popular_bags, ratings, 'AUX122XW8ONG6', 5)

#Write a function that recommends 5 beauty products for each user based on next items purchased by other users.

ratings_sort = ratings.sort_values(['reviewerID', 'unixReviewTime'])

ratings_sort

ratings_sort.reset_index(drop=True, inplace=True)

#sorting rating by timestamp

ratings_sort['next'] = np.nan
ratings_sort

ratings_sort.info()

for x in range(len(ratings_sort)-1):
  if ratings_sort['reviewerID'][x] == ratings_sort['reviewerID'][x+1]:
    ratings_sort['next'][x] = ratings_sort['asin'][x+1]
  else:
    ratings_sort['next'][x] = np.nan

#displaying the unique number of asin
ratings_sort['reviewerID'].nunique()

ratings_sort

ratings_sort[['reviewerID','asin','next']].head(20)

ratings_sort[ratings_sort['asin'] == 'B0012Y0ZG2']['next'].value_counts(dropna=True)[:5]

def recommend_next(uid, ratings, n):
  last_purchase = ratings.loc[ratings.reviewerID == uid, 'asin'].iloc[-1]
  print(f'last purchase: {last_purchase}')
  next_purchases = ratings.loc[ratings['asin'] == last_purchase, 'next'].value_counts(dropna=True)[:n]
  print(f'next purchase: {next_purchases}')
  return next_purchases

recommend_next('A105A034ZG9EHO', ratings_sort, 5)

