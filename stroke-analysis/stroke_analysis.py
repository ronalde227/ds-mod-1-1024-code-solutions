# -*- coding: utf-8 -*-
"""stroke_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m6TiVNZFLSE4gwaIKKeqhdvhR3JLl9oH
"""

import pandas as pd

strokes= pd.read_csv("/content/healthcare-dataset-stroke-data.csv")

strokes

#Question 1: Use .describe() to compute a variety of statistics on the whole data set at once.
strokes.describe()

#Question 2: Filter .describe() to only compute statistics on factors with floating point number values.

strokes.describe(include=float)

strokes.info()

#Question 3: Use .groupby() to create a data frame grouping by the "stroke" factor.

strokeG = strokes.groupby("stroke")

#Question 4: Use the "stroke" grouping to get only group where "stroke" is 1.

strokeG.get_group(1)

#Questions 5: Use .describe() to compute statistics on factors with floating point values for the data where "stroke" is 1.

#strokes[strokes.stroke == 1].describe(include=float)
strokeG.get_group(1).describe(include=float)

#Question #6: Filter .describe() to only compute statistics on factors with integer values, removing as much percentile data as possible

strokeG.get_group(1).describe(percentiles=None, include=int)

#Question 7: Create a data frame grouping by both the "hypertension" and "heart_disease" factors.

strokes.groupby(['heart_disease','hypertension'])

#Question 8: Get the group where both "hypertension" and "heart_disease" are 1.

strokes.groupby(['heart_disease','hypertension']).get_group((1,1))

#Question 9: Count the number of "id"s per group.

strokes.groupby(['heart_disease','hypertension'])['id'].nunique()

#Question 10: Aggregate both the mean and standard deviation of "stroke" per group.

strokes.groupby(['heart_disease','hypertension'])['stroke'].agg(['mean', 'std'])