# -*- coding: utf-8 -*-
"""time-series-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zg8GtnvSL-rLQVO4gVa9_olVSEAFPeAL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/AirPassengers.csv', index_col='Month')

df.info()

df

df.index = pd.to_datetime(df.index)

df

df.plot()

df_log = np.log(df)

df_log.plot()

df_log_diff1 = df_log.diff()

df_log_diff1.plot()

from statsmodels.tsa.stattools import adfuller

adfuller(df_log_diff1.dropna())

df_log_diff2 = df_log.diff(2)

adfuller(df_log_diff2.dropna())

#log diff 2 is stationary enough
#checking ACF and PACF to find order of ARIMA model

from statsmodels.tsa.stattools import acf, pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

plot_acf(df_log_diff2.dropna(),lags=np.arange(1,50));

#Base off the acf graph values q = [1,2,12,13,14]
#largest one being = 12

plot_pacf(df_log_diff2.dropna(), lags= np.arange(1,50));

#Base off the pacf graph values p = [1,2,3,5,7,8,9,10,11,12]
#The largest ones being [2, 11]

import itertools





df_log

ar = ARIMA(df_log, order=(11,2,12))

results = ar.fit()

fv2 = results.fittedvalues

fv2

fv2_exp = np.exp(fv2)

df.plot()
fv2_exp.plot()

from sklearn.metrics import root_mean_squared_error
from logging import root

root_mean_squared_error(df,fv2_exp)
#

fv2

#taking into account seasonality now

from statsmodels.tsa.seasonal import seasonal_decompose

decomp = seasonal_decompose(df)

trend = decomp.trend
seasonal = decomp.seasonal
noise = decomp.resid

fig, ax = plt.subplots(nrows=4, ncols=1)
ax[0].plot(df.index, df.values)
ax[1].plot(df.index, trend)
ax[2].plot(df.index, seasonal)
ax[3].plot(df.index, noise)

#stationizing noise
noise_df1 = noise.diff()
noise_df1.plot()

noise_df2 = noise.diff(2)
noise_df2.plot()

adfuller(noise_df1.dropna())

plot_acf(noise_df1.dropna());

plot_pacf(noise_df1.dropna()); #MA = Q = 12

ar3 = ARIMA(noise, order=(12, 1, 0)).fit() #Q
ma4 = ARIMA(noise, order=(0, 1, 12)).fit() #P
ar3ma4 = ARIMA(noise, order=(12, 1, 12)).fit()

noise.plot()
ar3ma4.fittedvalues.plot()

seasonal[0:30].plot() #AR P = 12 AND d = 1



seasonal.plot()

from statsmodels.tsa.statespace.sarimax import SARIMAX

adfuller(seasonal.dropna())

plot_acf(seasonal);

plot_acf(seasonal, lags=np.arange(1, len(seasonal)));

plot_acf(seasonal.diff().dropna(), lags=np.arange(1, len(seasonal)/2));

plot_pacf(seasonal, lags=np.arange(1, 30)); #p = 13

model = SARIMAX(df, order=(11,1,12), seasonal_order=(1,0,0,12), trend='ct').fit()

#p=11 , diff = 1 , q =12 , seasonality is 1 year(12), seasonality p =1, q = 0

df.plot()
model.fittedvalues.plot()

len(df)

